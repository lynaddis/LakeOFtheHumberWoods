#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DB_66299_aspproject")]
public partial class dropDownFillDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InserttblCountry(tblCountry instance);
  partial void UpdatetblCountry(tblCountry instance);
  partial void DeletetblCountry(tblCountry instance);
  partial void InserttblProvince(tblProvince instance);
  partial void UpdatetblProvince(tblProvince instance);
  partial void DeletetblProvince(tblProvince instance);
  partial void InserttblCity(tblCity instance);
  partial void UpdatetblCity(tblCity instance);
  partial void DeletetblCity(tblCity instance);
  partial void InsertdonorInformation(donorInformation instance);
  partial void UpdatedonorInformation(donorInformation instance);
  partial void DeletedonorInformation(donorInformation instance);
  partial void InserttblRoomType(tblRoomType instance);
  partial void UpdatetblRoomType(tblRoomType instance);
  partial void DeletetblRoomType(tblRoomType instance);
  partial void InserttblBedRoom(tblBedRoom instance);
  partial void UpdatetblBedRoom(tblBedRoom instance);
  partial void DeletetblBedRoom(tblBedRoom instance);
  partial void InserttblTicket(tblTicket instance);
  partial void UpdatetblTicket(tblTicket instance);
  partial void DeletetblTicket(tblTicket instance);
  #endregion
	
	public dropDownFillDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DataSourceConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public dropDownFillDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dropDownFillDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dropDownFillDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dropDownFillDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<tblCountry> tblCountries
	{
		get
		{
			return this.GetTable<tblCountry>();
		}
	}
	
	public System.Data.Linq.Table<tblProvince> tblProvinces
	{
		get
		{
			return this.GetTable<tblProvince>();
		}
	}
	
	public System.Data.Linq.Table<tblCity> tblCities
	{
		get
		{
			return this.GetTable<tblCity>();
		}
	}
	
	public System.Data.Linq.Table<donorInformation> donorInformations
	{
		get
		{
			return this.GetTable<donorInformation>();
		}
	}
	
	public System.Data.Linq.Table<tblRoomType> tblRoomTypes
	{
		get
		{
			return this.GetTable<tblRoomType>();
		}
	}
	
	public System.Data.Linq.Table<tblBedRoom> tblBedRooms
	{
		get
		{
			return this.GetTable<tblBedRoom>();
		}
	}
	
	public System.Data.Linq.Table<tblTicket> tblTickets
	{
		get
		{
			return this.GetTable<tblTicket>();
		}
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spGetDonorInformation")]
	public ISingleResult<donorInformation> spGetDonorInformation()
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		return ((ISingleResult<donorInformation>)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spGetDonorInformationById")]
	public ISingleResult<donorInformation> spGetDonorInformationById([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		return ((ISingleResult<donorInformation>)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spUpdateDonorInformation")]
	public int spUpdateDonorInformation(
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> amount, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string title, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string firstname, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string middle, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string lastname, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string type, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string company, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string zipcode, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string pobox, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string country, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string province, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string city, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string email, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(20)")] string phonehome, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(20)")] string phonework, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string emailsend)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, amount, title, firstname, middle, lastname, type, company, zipcode, pobox, country, province, city, email, phonehome, phonework, emailsend);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spInsertDonorInformation")]
	public int spInsertDonorInformation(
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> amount, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string title, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string firstname, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string middle, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string lastname, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string type, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string company, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string zipcode, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string pobox, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string country, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string province, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string city, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string email, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(20)")] string phonehome, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(20)")] string phonework, 
				[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string emailsend)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), amount, title, firstname, middle, lastname, type, company, zipcode, pobox, country, province, city, email, phonehome, phonework, emailsend);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spUpdateBedRooms")]
	public int spUpdateBedRooms([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> bedcount, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> bedid)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bedcount, bedid);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spGetBedRoomAndRoomType")]
	public ISingleResult<tblBedRoom> spGetBedRoomAndRoomType()
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		return ((ISingleResult<tblBedRoom>)(result.ReturnValue));
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCountry")]
public partial class tblCountry : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _countryId;
	
	private string _countryName;
	
	private EntitySet<tblProvince> _tblProvinces;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncountryIdChanging(int value);
    partial void OncountryIdChanged();
    partial void OncountryNameChanging(string value);
    partial void OncountryNameChanged();
    #endregion
	
	public tblCountry()
	{
		this._tblProvinces = new EntitySet<tblProvince>(new Action<tblProvince>(this.attach_tblProvinces), new Action<tblProvince>(this.detach_tblProvinces));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int countryId
	{
		get
		{
			return this._countryId;
		}
		set
		{
			if ((this._countryId != value))
			{
				this.OncountryIdChanging(value);
				this.SendPropertyChanging();
				this._countryId = value;
				this.SendPropertyChanged("countryId");
				this.OncountryIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string countryName
	{
		get
		{
			return this._countryName;
		}
		set
		{
			if ((this._countryName != value))
			{
				this.OncountryNameChanging(value);
				this.SendPropertyChanging();
				this._countryName = value;
				this.SendPropertyChanged("countryName");
				this.OncountryNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCountry_tblProvince", Storage="_tblProvinces", ThisKey="countryId", OtherKey="provinceCountryId")]
	public EntitySet<tblProvince> tblProvinces
	{
		get
		{
			return this._tblProvinces;
		}
		set
		{
			this._tblProvinces.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tblProvinces(tblProvince entity)
	{
		this.SendPropertyChanging();
		entity.tblCountry = this;
	}
	
	private void detach_tblProvinces(tblProvince entity)
	{
		this.SendPropertyChanging();
		entity.tblCountry = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblProvince")]
public partial class tblProvince : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _provinceId;
	
	private string _provikceName;
	
	private int _provinceCountryId;
	
	private EntitySet<tblCity> _tblCities;
	
	private EntityRef<tblCountry> _tblCountry;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprovinceIdChanging(int value);
    partial void OnprovinceIdChanged();
    partial void OnprovikceNameChanging(string value);
    partial void OnprovikceNameChanged();
    partial void OnprovinceCountryIdChanging(int value);
    partial void OnprovinceCountryIdChanged();
    #endregion
	
	public tblProvince()
	{
		this._tblCities = new EntitySet<tblCity>(new Action<tblCity>(this.attach_tblCities), new Action<tblCity>(this.detach_tblCities));
		this._tblCountry = default(EntityRef<tblCountry>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provinceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int provinceId
	{
		get
		{
			return this._provinceId;
		}
		set
		{
			if ((this._provinceId != value))
			{
				this.OnprovinceIdChanging(value);
				this.SendPropertyChanging();
				this._provinceId = value;
				this.SendPropertyChanged("provinceId");
				this.OnprovinceIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provikceName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string provikceName
	{
		get
		{
			return this._provikceName;
		}
		set
		{
			if ((this._provikceName != value))
			{
				this.OnprovikceNameChanging(value);
				this.SendPropertyChanging();
				this._provikceName = value;
				this.SendPropertyChanged("provikceName");
				this.OnprovikceNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provinceCountryId", DbType="Int NOT NULL")]
	public int provinceCountryId
	{
		get
		{
			return this._provinceCountryId;
		}
		set
		{
			if ((this._provinceCountryId != value))
			{
				if (this._tblCountry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnprovinceCountryIdChanging(value);
				this.SendPropertyChanging();
				this._provinceCountryId = value;
				this.SendPropertyChanged("provinceCountryId");
				this.OnprovinceCountryIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblProvince_tblCity", Storage="_tblCities", ThisKey="provinceId", OtherKey="cityProvinceId")]
	public EntitySet<tblCity> tblCities
	{
		get
		{
			return this._tblCities;
		}
		set
		{
			this._tblCities.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCountry_tblProvince", Storage="_tblCountry", ThisKey="provinceCountryId", OtherKey="countryId", IsForeignKey=true)]
	public tblCountry tblCountry
	{
		get
		{
			return this._tblCountry.Entity;
		}
		set
		{
			tblCountry previousValue = this._tblCountry.Entity;
			if (((previousValue != value) 
						|| (this._tblCountry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblCountry.Entity = null;
					previousValue.tblProvinces.Remove(this);
				}
				this._tblCountry.Entity = value;
				if ((value != null))
				{
					value.tblProvinces.Add(this);
					this._provinceCountryId = value.countryId;
				}
				else
				{
					this._provinceCountryId = default(int);
				}
				this.SendPropertyChanged("tblCountry");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tblCities(tblCity entity)
	{
		this.SendPropertyChanging();
		entity.tblProvince = this;
	}
	
	private void detach_tblCities(tblCity entity)
	{
		this.SendPropertyChanging();
		entity.tblProvince = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCity")]
public partial class tblCity : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _cityId;
	
	private string _cityName;
	
	private int _cityProvinceId;
	
	private EntityRef<tblProvince> _tblProvince;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncityIdChanging(int value);
    partial void OncityIdChanged();
    partial void OncityNameChanging(string value);
    partial void OncityNameChanged();
    partial void OncityProvinceIdChanging(int value);
    partial void OncityProvinceIdChanged();
    #endregion
	
	public tblCity()
	{
		this._tblProvince = default(EntityRef<tblProvince>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int cityId
	{
		get
		{
			return this._cityId;
		}
		set
		{
			if ((this._cityId != value))
			{
				this.OncityIdChanging(value);
				this.SendPropertyChanging();
				this._cityId = value;
				this.SendPropertyChanged("cityId");
				this.OncityIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string cityName
	{
		get
		{
			return this._cityName;
		}
		set
		{
			if ((this._cityName != value))
			{
				this.OncityNameChanging(value);
				this.SendPropertyChanging();
				this._cityName = value;
				this.SendPropertyChanged("cityName");
				this.OncityNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityProvinceId", DbType="Int NOT NULL")]
	public int cityProvinceId
	{
		get
		{
			return this._cityProvinceId;
		}
		set
		{
			if ((this._cityProvinceId != value))
			{
				if (this._tblProvince.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OncityProvinceIdChanging(value);
				this.SendPropertyChanging();
				this._cityProvinceId = value;
				this.SendPropertyChanged("cityProvinceId");
				this.OncityProvinceIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblProvince_tblCity", Storage="_tblProvince", ThisKey="cityProvinceId", OtherKey="provinceId", IsForeignKey=true)]
	public tblProvince tblProvince
	{
		get
		{
			return this._tblProvince.Entity;
		}
		set
		{
			tblProvince previousValue = this._tblProvince.Entity;
			if (((previousValue != value) 
						|| (this._tblProvince.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblProvince.Entity = null;
					previousValue.tblCities.Remove(this);
				}
				this._tblProvince.Entity = value;
				if ((value != null))
				{
					value.tblCities.Add(this);
					this._cityProvinceId = value.provinceId;
				}
				else
				{
					this._cityProvinceId = default(int);
				}
				this.SendPropertyChanged("tblProvince");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.donorInformation")]
public partial class donorInformation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _donorId;
	
	private int _donorAmount;
	
	private string _donorTitle;
	
	private string _donorFirstName;
	
	private string _donorMiddleName;
	
	private string _donorLastName;
	
	private string _DonorType;
	
	private string _DonorCompany;
	
	private string _donorZipCode;
	
	private string _donorPoBox;
	
	private string _donorCountry;
	
	private string _donorProvince;
	
	private string _donorCity;
	
	private string _donorEmail;
	
	private string _donorPhoneHome;
	
	private string _donorPhoneWork;
	
	private string _donorEmailSend;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndonorIdChanging(int value);
    partial void OndonorIdChanged();
    partial void OndonorAmountChanging(int value);
    partial void OndonorAmountChanged();
    partial void OndonorTitleChanging(string value);
    partial void OndonorTitleChanged();
    partial void OndonorFirstNameChanging(string value);
    partial void OndonorFirstNameChanged();
    partial void OndonorMiddleNameChanging(string value);
    partial void OndonorMiddleNameChanged();
    partial void OndonorLastNameChanging(string value);
    partial void OndonorLastNameChanged();
    partial void OnDonorTypeChanging(string value);
    partial void OnDonorTypeChanged();
    partial void OnDonorCompanyChanging(string value);
    partial void OnDonorCompanyChanged();
    partial void OndonorZipCodeChanging(string value);
    partial void OndonorZipCodeChanged();
    partial void OndonorPoBoxChanging(string value);
    partial void OndonorPoBoxChanged();
    partial void OndonorCountryChanging(string value);
    partial void OndonorCountryChanged();
    partial void OndonorProvinceChanging(string value);
    partial void OndonorProvinceChanged();
    partial void OndonorCityChanging(string value);
    partial void OndonorCityChanged();
    partial void OndonorEmailChanging(string value);
    partial void OndonorEmailChanged();
    partial void OndonorPhoneHomeChanging(string value);
    partial void OndonorPhoneHomeChanged();
    partial void OndonorPhoneWorkChanging(string value);
    partial void OndonorPhoneWorkChanged();
    partial void OndonorEmailSendChanging(string value);
    partial void OndonorEmailSendChanged();
    #endregion
	
	public donorInformation()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int donorId
	{
		get
		{
			return this._donorId;
		}
		set
		{
			if ((this._donorId != value))
			{
				this.OndonorIdChanging(value);
				this.SendPropertyChanging();
				this._donorId = value;
				this.SendPropertyChanged("donorId");
				this.OndonorIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorAmount", DbType="Int NOT NULL")]
	public int donorAmount
	{
		get
		{
			return this._donorAmount;
		}
		set
		{
			if ((this._donorAmount != value))
			{
				this.OndonorAmountChanging(value);
				this.SendPropertyChanging();
				this._donorAmount = value;
				this.SendPropertyChanged("donorAmount");
				this.OndonorAmountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string donorTitle
	{
		get
		{
			return this._donorTitle;
		}
		set
		{
			if ((this._donorTitle != value))
			{
				this.OndonorTitleChanging(value);
				this.SendPropertyChanging();
				this._donorTitle = value;
				this.SendPropertyChanged("donorTitle");
				this.OndonorTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorFirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string donorFirstName
	{
		get
		{
			return this._donorFirstName;
		}
		set
		{
			if ((this._donorFirstName != value))
			{
				this.OndonorFirstNameChanging(value);
				this.SendPropertyChanging();
				this._donorFirstName = value;
				this.SendPropertyChanged("donorFirstName");
				this.OndonorFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorMiddleName", DbType="NVarChar(50)")]
	public string donorMiddleName
	{
		get
		{
			return this._donorMiddleName;
		}
		set
		{
			if ((this._donorMiddleName != value))
			{
				this.OndonorMiddleNameChanging(value);
				this.SendPropertyChanging();
				this._donorMiddleName = value;
				this.SendPropertyChanged("donorMiddleName");
				this.OndonorMiddleNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorLastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string donorLastName
	{
		get
		{
			return this._donorLastName;
		}
		set
		{
			if ((this._donorLastName != value))
			{
				this.OndonorLastNameChanging(value);
				this.SendPropertyChanging();
				this._donorLastName = value;
				this.SendPropertyChanged("donorLastName");
				this.OndonorLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonorType", DbType="NVarChar(50)")]
	public string DonorType
	{
		get
		{
			return this._DonorType;
		}
		set
		{
			if ((this._DonorType != value))
			{
				this.OnDonorTypeChanging(value);
				this.SendPropertyChanging();
				this._DonorType = value;
				this.SendPropertyChanged("DonorType");
				this.OnDonorTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonorCompany", DbType="NVarChar(50)")]
	public string DonorCompany
	{
		get
		{
			return this._DonorCompany;
		}
		set
		{
			if ((this._DonorCompany != value))
			{
				this.OnDonorCompanyChanging(value);
				this.SendPropertyChanging();
				this._DonorCompany = value;
				this.SendPropertyChanged("DonorCompany");
				this.OnDonorCompanyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorZipCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string donorZipCode
	{
		get
		{
			return this._donorZipCode;
		}
		set
		{
			if ((this._donorZipCode != value))
			{
				this.OndonorZipCodeChanging(value);
				this.SendPropertyChanging();
				this._donorZipCode = value;
				this.SendPropertyChanged("donorZipCode");
				this.OndonorZipCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorPoBox", DbType="NVarChar(50)")]
	public string donorPoBox
	{
		get
		{
			return this._donorPoBox;
		}
		set
		{
			if ((this._donorPoBox != value))
			{
				this.OndonorPoBoxChanging(value);
				this.SendPropertyChanging();
				this._donorPoBox = value;
				this.SendPropertyChanged("donorPoBox");
				this.OndonorPoBoxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorCountry", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string donorCountry
	{
		get
		{
			return this._donorCountry;
		}
		set
		{
			if ((this._donorCountry != value))
			{
				this.OndonorCountryChanging(value);
				this.SendPropertyChanging();
				this._donorCountry = value;
				this.SendPropertyChanged("donorCountry");
				this.OndonorCountryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorProvince", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string donorProvince
	{
		get
		{
			return this._donorProvince;
		}
		set
		{
			if ((this._donorProvince != value))
			{
				this.OndonorProvinceChanging(value);
				this.SendPropertyChanging();
				this._donorProvince = value;
				this.SendPropertyChanged("donorProvince");
				this.OndonorProvinceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorCity", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string donorCity
	{
		get
		{
			return this._donorCity;
		}
		set
		{
			if ((this._donorCity != value))
			{
				this.OndonorCityChanging(value);
				this.SendPropertyChanging();
				this._donorCity = value;
				this.SendPropertyChanged("donorCity");
				this.OndonorCityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorEmail", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string donorEmail
	{
		get
		{
			return this._donorEmail;
		}
		set
		{
			if ((this._donorEmail != value))
			{
				this.OndonorEmailChanging(value);
				this.SendPropertyChanging();
				this._donorEmail = value;
				this.SendPropertyChanged("donorEmail");
				this.OndonorEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorPhoneHome", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string donorPhoneHome
	{
		get
		{
			return this._donorPhoneHome;
		}
		set
		{
			if ((this._donorPhoneHome != value))
			{
				this.OndonorPhoneHomeChanging(value);
				this.SendPropertyChanging();
				this._donorPhoneHome = value;
				this.SendPropertyChanged("donorPhoneHome");
				this.OndonorPhoneHomeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorPhoneWork", DbType="NVarChar(20)")]
	public string donorPhoneWork
	{
		get
		{
			return this._donorPhoneWork;
		}
		set
		{
			if ((this._donorPhoneWork != value))
			{
				this.OndonorPhoneWorkChanging(value);
				this.SendPropertyChanging();
				this._donorPhoneWork = value;
				this.SendPropertyChanged("donorPhoneWork");
				this.OndonorPhoneWorkChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donorEmailSend", DbType="NChar(10)")]
	public string donorEmailSend
	{
		get
		{
			return this._donorEmailSend;
		}
		set
		{
			if ((this._donorEmailSend != value))
			{
				this.OndonorEmailSendChanging(value);
				this.SendPropertyChanging();
				this._donorEmailSend = value;
				this.SendPropertyChanged("donorEmailSend");
				this.OndonorEmailSendChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblRoomType")]
public partial class tblRoomType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _roomId;
	
	private string _roomType;
	
	private int _roomTotleBed;
	
	private EntitySet<tblBedRoom> _tblBedRooms;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroomIdChanging(int value);
    partial void OnroomIdChanged();
    partial void OnroomTypeChanging(string value);
    partial void OnroomTypeChanged();
    partial void OnroomTotleBedChanging(int value);
    partial void OnroomTotleBedChanged();
    #endregion
	
	public tblRoomType()
	{
		this._tblBedRooms = new EntitySet<tblBedRoom>(new Action<tblBedRoom>(this.attach_tblBedRooms), new Action<tblBedRoom>(this.detach_tblBedRooms));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int roomId
	{
		get
		{
			return this._roomId;
		}
		set
		{
			if ((this._roomId != value))
			{
				this.OnroomIdChanging(value);
				this.SendPropertyChanging();
				this._roomId = value;
				this.SendPropertyChanged("roomId");
				this.OnroomIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string roomType
	{
		get
		{
			return this._roomType;
		}
		set
		{
			if ((this._roomType != value))
			{
				this.OnroomTypeChanging(value);
				this.SendPropertyChanging();
				this._roomType = value;
				this.SendPropertyChanged("roomType");
				this.OnroomTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomTotleBed", DbType="Int NOT NULL")]
	public int roomTotleBed
	{
		get
		{
			return this._roomTotleBed;
		}
		set
		{
			if ((this._roomTotleBed != value))
			{
				this.OnroomTotleBedChanging(value);
				this.SendPropertyChanging();
				this._roomTotleBed = value;
				this.SendPropertyChanged("roomTotleBed");
				this.OnroomTotleBedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblRoomType_tblBedRoom", Storage="_tblBedRooms", ThisKey="roomId", OtherKey="bedRoomId")]
	public EntitySet<tblBedRoom> tblBedRooms
	{
		get
		{
			return this._tblBedRooms;
		}
		set
		{
			this._tblBedRooms.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tblBedRooms(tblBedRoom entity)
	{
		this.SendPropertyChanging();
		entity.tblRoomType = this;
	}
	
	private void detach_tblBedRooms(tblBedRoom entity)
	{
		this.SendPropertyChanging();
		entity.tblRoomType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblBedRooms")]
public partial class tblBedRoom : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _bedId;
	
	private int _bedCount;
	
	private int _bedAvailable;
	
	private int _bedRoomId;
	
	private System.Nullable<int> _roomNo;
	
	private EntityRef<tblRoomType> _tblRoomType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbedIdChanging(int value);
    partial void OnbedIdChanged();
    partial void OnbedCountChanging(int value);
    partial void OnbedCountChanged();
    partial void OnbedAvailableChanging(int value);
    partial void OnbedAvailableChanged();
    partial void OnbedRoomIdChanging(int value);
    partial void OnbedRoomIdChanged();
    partial void OnroomNoChanging(System.Nullable<int> value);
    partial void OnroomNoChanged();
    #endregion
	
	public tblBedRoom()
	{
		this._tblRoomType = default(EntityRef<tblRoomType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bedId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int bedId
	{
		get
		{
			return this._bedId;
		}
		set
		{
			if ((this._bedId != value))
			{
				this.OnbedIdChanging(value);
				this.SendPropertyChanging();
				this._bedId = value;
				this.SendPropertyChanged("bedId");
				this.OnbedIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bedCount", DbType="Int NOT NULL")]
	public int bedCount
	{
		get
		{
			return this._bedCount;
		}
		set
		{
			if ((this._bedCount != value))
			{
				this.OnbedCountChanging(value);
				this.SendPropertyChanging();
				this._bedCount = value;
				this.SendPropertyChanged("bedCount");
				this.OnbedCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bedAvailable", DbType="Int NOT NULL")]
	public int bedAvailable
	{
		get
		{
			return this._bedAvailable;
		}
		set
		{
			if ((this._bedAvailable != value))
			{
				this.OnbedAvailableChanging(value);
				this.SendPropertyChanging();
				this._bedAvailable = value;
				this.SendPropertyChanged("bedAvailable");
				this.OnbedAvailableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bedRoomId", DbType="Int NOT NULL")]
	public int bedRoomId
	{
		get
		{
			return this._bedRoomId;
		}
		set
		{
			if ((this._bedRoomId != value))
			{
				if (this._tblRoomType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnbedRoomIdChanging(value);
				this.SendPropertyChanging();
				this._bedRoomId = value;
				this.SendPropertyChanged("bedRoomId");
				this.OnbedRoomIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomNo", DbType="Int")]
	public System.Nullable<int> roomNo
	{
		get
		{
			return this._roomNo;
		}
		set
		{
			if ((this._roomNo != value))
			{
				this.OnroomNoChanging(value);
				this.SendPropertyChanging();
				this._roomNo = value;
				this.SendPropertyChanged("roomNo");
				this.OnroomNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblRoomType_tblBedRoom", Storage="_tblRoomType", ThisKey="bedRoomId", OtherKey="roomId", IsForeignKey=true)]
	public tblRoomType tblRoomType
	{
		get
		{
			return this._tblRoomType.Entity;
		}
		set
		{
			tblRoomType previousValue = this._tblRoomType.Entity;
			if (((previousValue != value) 
						|| (this._tblRoomType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblRoomType.Entity = null;
					previousValue.tblBedRooms.Remove(this);
				}
				this._tblRoomType.Entity = value;
				if ((value != null))
				{
					value.tblBedRooms.Add(this);
					this._bedRoomId = value.roomId;
				}
				else
				{
					this._bedRoomId = default(int);
				}
				this.SendPropertyChanged("tblRoomType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblTickets")]
public partial class tblTicket : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ticketId;
	
	private string _ticketNo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnticketIdChanging(int value);
    partial void OnticketIdChanged();
    partial void OnticketNoChanging(string value);
    partial void OnticketNoChanged();
    #endregion
	
	public tblTicket()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticketId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ticketId
	{
		get
		{
			return this._ticketId;
		}
		set
		{
			if ((this._ticketId != value))
			{
				this.OnticketIdChanging(value);
				this.SendPropertyChanging();
				this._ticketId = value;
				this.SendPropertyChanged("ticketId");
				this.OnticketIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticketNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string ticketNo
	{
		get
		{
			return this._ticketNo;
		}
		set
		{
			if ((this._ticketNo != value))
			{
				this.OnticketNoChanging(value);
				this.SendPropertyChanging();
				this._ticketNo = value;
				this.SendPropertyChanged("ticketNo");
				this.OnticketNoChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
